<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAAAAACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAgAoAAAAAAAAAAAAAAAEAAAAA
        AAD///8AWFhYAAAAAACwrLAAeBRYADg0OABoaGgAoLz/AGiM0AA4ACgAKBQYALAAeAAoNFgAwAB4ALBo
        kABISEgAKBQoAMC8wADQ0NAAoJygABgAGABIADgAKCQoAEhIOACQjJAAKDQoAFgUOABINEgAOBQ4ALAU
        eABYFEgAOCQ4ALBooAAYFBgAsFiQADhISAB4jHgAsFigAKBokACQaHgAaEhYAPDg8ACQnJAAaHhoAEg0
        OAAYAAAAeIyQAGg0WACQjHgASBQoACgAGACQjKAAaHh4AGgASABYAFgASCQoACgAKAAYFCgAaABYAGgU
        SAB4AFgAaBRYAODg4AA4SDgAWEhYADgkKAA4NEgA0KzAANCs0ADQ4NAAkFh4AHhYaABIJDgA4KzQAODQ
        4ACQnKAAoHiQALCswACgjKAA4PDgALCcsABYaFgAkHh4AJB4aAB4aGgAGCQoABgkGAAoJBgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG
        BgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBhYWFgICAgICBQUFBQUFBQUFBQUFBQUF
        BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFAgICFgICAgIBAgICAgICAgICAgICAgICAgICAgICAgICAgIC
        AgICAgICAgICAgICAgICFgICAgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEB
        AQICBgICAgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQIBAQICAgIBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBEAICAgICAgIBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEQAQABAgICAgIBAAAAFAAEBAQEBAQEBAQEBAQEBAQEBAAUFAAU
        FBQABAQECgkKCRABBwcADAICAgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBEAEH
        AAgMBgICAgIBAAAAAAAAAAAABAQEBAAEBAQEBAQABAQEBAQEAAQEBAoJChQQAQcACAwFBgICAgIBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBARABBwAIDAIFBgICAgIBAAAABAQEAAQEBAQEAAQE
        BB4xCQEULRgRAAAAAAABAQEBEAEHAAgMAAIFBgICAgIBAAAAAAAAAAAAAAAAAAADAQEBAQEBAQEBARgR
        AAEBAQEQAQcACAwAAAIFBgICAgIBAAAAHBUcFQAVHBUcCSEyAQEBCQoJAQEBAQEBAQEBARABBwAIDAAA
        AAIFBgICAgIBAAAAAAAAAAAAAAABAQEBGBEAAAAAAAMBAQEBAQEBEAEHAAgMAAAAAAIFBgICAgIBAAAA
        BAQEBAQEBAkKCQEEBAQEBAQEBAQEHgoJCgkQAQcACAwAAAAAAAIFBgICAgIBAAAAAAAAAAAAAQEBAwMB
        AQEBATQzEQAAAAADAQIBBwAIDAAAAAAAAAIFBgICAgIBAAAAAAAAAAABCjgBAQ8XDxcPFw8BAQE3Nh41
        AgIBAAgMAAAAAAAAAAIFBgICAgIBAAAAAAAAAAMBIx8hAgICAgICAgI5GRsBAQECAgEDAQIDAAAAAAAA
        AAIFBgICAgIBAAAAPTw7OgoBAgICAQEDAwMDAQECAgICAQICAQMBAgEBAAAAAAAAAAIFBgICAgIBAAAA
        AAAAAwECAgEDAAAAAAAAAAADAwECAgIBAwECAAEBPgAAAAAAAAIFBgICAgIBAAAABAQECQIJAQAAAAAA
        AAAAAAAAABMBAgIDAQIOIAoBGgQEBAQAAAIFBgICAgIBAAAAAAABAgEDAAAAAAAAAAAAAAAAAAAAEwIC
        Ag8PAAEBAwAAAAAAAAIFBgICAgIBAAAABBoCCQAAAAAAAAAODQANHQAACw0AABMJAj8PAQ4JAQAAAAAA
        AAIFBgICAgIBAAAAAAECAwAAAAAAAAAmCwALCwAADQsAAAATAh8FQAABAQAAAAAAAAIFBgICAgIBAAAA
        GgIBCQAAAAAAAAAAAAANCwAACw0AAAAAAQJBFwoJCgQEAAAAAAIFBgICAgIBAAAAAhsBAQAAAAAAAAAA
        AAANCwAACw0AAAAAEwICQgEBAQAAAAAAAAIFBgICAgIBAAADAg8BCQoSAAAAAAAAAAALCw4ACwsAAAAA
        AAECGQEBGAAAAAAAAAIFBgICAgIBAAABAgEBAQEDAAAACwAAAAANHUQNC0MAAAAAAAMCFhkBEwAAAAAA
        AAIFBgICAgIBAAACGwEKCQoDEgsNHQ0LAAALCwAAAAAAAAAAACIBAgUJGgQEAAAAAAIFBgICAgIBAAAC
        DwEBAQEDAxIlCyUAAAANCwAAAAAAAAAAAAEBAhkBEgAAAAAAAAIFBgICAgIBAAACAQEBCQoDAwMNAA0A
        AAALCwAAAAAAAAAADgkKAh8BBAAAAAAAAAIFBgICAgIBAAACAQEAAQEDAwMDEhIAAAAAAAAAAAAAAEUT
        AQEBAhkYAAAAAAAAAAIFBgICAgIBAAACAQEOIAoDAwMDA0gvR0YmIA4ADicoCQoJCgkKAgUaBAQEBAQA
        AAIFBgICAgIBAAACDwEqAAADAwMDAwEBAQEBAQEBAQEBAQEBAQEBAgERAAAAAAAAAAIFBgICAgIBAAAC
        BQEBDg5JAwMDAwEJCgkKCQoJCgkKAQEBAQEBIQEAAAAAAAAAAAIFBgICAgIBAAABAgEBAAAAAAMDAwEB
        AQEBAQEBAQEBAQEBS0oCFgAAAAAAAAAAAAIFBgICAgIBAAATAg8BTA4iAAAAAwoJCgkBCQoJCgkBCSgn
        DiICCQQEBAAAAAAAAAIFBgICAgIBAAAAAgUBAQAAAAAAAAASEk4BAQEBLk0SKQAAAAECAAAAAAAAAAAA
        AAIFBgICAgIBAAAAEwIBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBAAAAAAAAAAAAAAIFBgICAgIBAAAA
        AAIjAQEAAAAAAAAAAAAAAAAAAAAAAAAAAgEAAAAAAAAAAAAAAAIFBgICAgIBAAAAAAMCFwEBAAAAAAAA
        AAAAAAAAAAAAAAACAgAAAAAAAAAAAAAAAAIFBgICAgIBAAAAAAADAiMBAVBPAAAAAAAAAAAAAAAAAQIC
        AAAAAAAAAAAAAAAAAAIFAgICAgIBAQEBAQEBLAICAQEBAStUUzAqJFIkK1EBAgIBAQEBAQEBAQEBAQEB
        AQECAgICAgICAgICAgICAgIFAhsBAQEBAQEBAQEBARtVBQICAgICAgICAgICAgICAgICAgICAgICAgIC
        AgICAgICDwICVywBAQEBFwVWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQIC
        AgICAgUCAgICAgICAgICAgICAgICAgICAgICAgIC///////////wAAAAAAP//+AAAAAAA///wAAAAAAD
        ///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AA
        AAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD
        ///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AA
        AAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD
        ///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AAAAAAA///wAAAAAAD///AAAAAAAP//8AA
        AAAAA///wAAAAAAD///AAAAAAAf//8AAAAAAD////+AAD///////8AA////////+Af//////
</value>
  </data>
</root>